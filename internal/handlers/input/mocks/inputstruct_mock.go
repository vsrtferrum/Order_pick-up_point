// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/handlers/input/inputstruct.go

// Package mock_inputstruct is a generated GoMock package.
package mock_inputstruct

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "gitlab.ozon.dev/berkinv/homework/internal/models"
)

// Mockreader is a mock of reader interface.
type Mockreader struct {
	ctrl     *gomock.Controller
	recorder *MockreaderMockRecorder
}

// MockreaderMockRecorder is the mock recorder for Mockreader.
type MockreaderMockRecorder struct {
	mock *Mockreader
}

// NewMockreader creates a new mock instance.
func NewMockreader(ctrl *gomock.Controller) *Mockreader {
	mock := &Mockreader{ctrl: ctrl}
	mock.recorder = &MockreaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockreader) EXPECT() *MockreaderMockRecorder {
	return m.recorder
}

// CliAccept mocks base method.
func (m *Mockreader) CliAccept(arg []string) (models.ReceiveOrderDeliver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CliAccept", arg)
	ret0, _ := ret[0].(models.ReceiveOrderDeliver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CliAccept indicates an expected call of CliAccept.
func (mr *MockreaderMockRecorder) CliAccept(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CliAccept", reflect.TypeOf((*Mockreader)(nil).CliAccept), arg)
}

// CliAddPackage mocks base method.
func (m *Mockreader) CliAddPackage(arg []string) (models.PackageUnit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CliAddPackage", arg)
	ret0, _ := ret[0].(models.PackageUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CliAddPackage indicates an expected call of CliAddPackage.
func (mr *MockreaderMockRecorder) CliAddPackage(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CliAddPackage", reflect.TypeOf((*Mockreader)(nil).CliAddPackage), arg)
}

// CliChangePack mocks base method.
func (m *Mockreader) CliChangePack(arg []string) (models.ChangePackage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CliChangePack", arg)
	ret0, _ := ret[0].(models.ChangePackage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CliChangePack indicates an expected call of CliChangePack.
func (mr *MockreaderMockRecorder) CliChangePack(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CliChangePack", reflect.TypeOf((*Mockreader)(nil).CliChangePack), arg)
}

// CliIssueUser mocks base method.
func (m *Mockreader) CliIssueUser(arg []string) ([]models.ReceiveOrderUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CliIssueUser", arg)
	ret0, _ := ret[0].([]models.ReceiveOrderUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CliIssueUser indicates an expected call of CliIssueUser.
func (mr *MockreaderMockRecorder) CliIssueUser(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CliIssueUser", reflect.TypeOf((*Mockreader)(nil).CliIssueUser), arg)
}

// CliListOrder mocks base method.
func (m *Mockreader) CliListOrder(arg []string) (models.OrderList, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CliListOrder", arg)
	ret0, _ := ret[0].(models.OrderList)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CliListOrder indicates an expected call of CliListOrder.
func (mr *MockreaderMockRecorder) CliListOrder(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CliListOrder", reflect.TypeOf((*Mockreader)(nil).CliListOrder), arg)
}

// CliListRefund mocks base method.
func (m *Mockreader) CliListRefund(arg []string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CliListRefund", arg)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CliListRefund indicates an expected call of CliListRefund.
func (mr *MockreaderMockRecorder) CliListRefund(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CliListRefund", reflect.TypeOf((*Mockreader)(nil).CliListRefund), arg)
}

// CliRefundDeliver mocks base method.
func (m *Mockreader) CliRefundDeliver(arg []string) (models.RefundOrderDeliver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CliRefundDeliver", arg)
	ret0, _ := ret[0].(models.RefundOrderDeliver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CliRefundDeliver indicates an expected call of CliRefundDeliver.
func (mr *MockreaderMockRecorder) CliRefundDeliver(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CliRefundDeliver", reflect.TypeOf((*Mockreader)(nil).CliRefundDeliver), arg)
}

// CliRefundUser mocks base method.
func (m *Mockreader) CliRefundUser(arg []string) (models.RefundUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CliRefundUser", arg)
	ret0, _ := ret[0].(models.RefundUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CliRefundUser indicates an expected call of CliRefundUser.
func (mr *MockreaderMockRecorder) CliRefundUser(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CliRefundUser", reflect.TypeOf((*Mockreader)(nil).CliRefundUser), arg)
}

// CliSetWorkersNum mocks base method.
func (m *Mockreader) CliSetWorkersNum(arg []string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CliSetWorkersNum", arg)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CliSetWorkersNum indicates an expected call of CliSetWorkersNum.
func (mr *MockreaderMockRecorder) CliSetWorkersNum(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CliSetWorkersNum", reflect.TypeOf((*Mockreader)(nil).CliSetWorkersNum), arg)
}
