// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/storage/storage.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	sql "database/sql"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	models "gitlab.ozon.dev/berkinv/homework/internal/models"
)

// MockReadnWrite is a mock of ReadnWrite interface.
type MockReadnWrite struct {
	ctrl     *gomock.Controller
	recorder *MockReadnWriteMockRecorder
}

// MockReadnWriteMockRecorder is the mock recorder for MockReadnWrite.
type MockReadnWriteMockRecorder struct {
	mock *MockReadnWrite
}

// NewMockReadnWrite creates a new mock instance.
func NewMockReadnWrite(ctrl *gomock.Controller) *MockReadnWrite {
	mock := &MockReadnWrite{ctrl: ctrl}
	mock.recorder = &MockReadnWriteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadnWrite) EXPECT() *MockReadnWriteMockRecorder {
	return m.recorder
}

// AddPackage mocks base method.
func (m *MockReadnWrite) AddPackage(data models.PackageUnit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPackage", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPackage indicates an expected call of AddPackage.
func (mr *MockReadnWriteMockRecorder) AddPackage(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPackage", reflect.TypeOf((*MockReadnWrite)(nil).AddPackage), data)
}

// ChangePackge mocks base method.
func (m *MockReadnWrite) ChangePackge(data models.ChangePackage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePackge", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePackge indicates an expected call of ChangePackge.
func (mr *MockReadnWriteMockRecorder) ChangePackge(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePackge", reflect.TypeOf((*MockReadnWrite)(nil).ChangePackge), data)
}

// ChoosePackage mocks base method.
func (m *MockReadnWrite) ChoosePackage(id_pack uint) (models.PackageUnit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChoosePackage", id_pack)
	ret0, _ := ret[0].(models.PackageUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChoosePackage indicates an expected call of ChoosePackage.
func (mr *MockReadnWriteMockRecorder) ChoosePackage(id_pack interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChoosePackage", reflect.TypeOf((*MockReadnWrite)(nil).ChoosePackage), id_pack)
}

// DeleteRowOrderData mocks base method.
func (m *MockReadnWrite) DeleteRowOrderData(ido uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRowOrderData", ido)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRowOrderData indicates an expected call of DeleteRowOrderData.
func (mr *MockReadnWriteMockRecorder) DeleteRowOrderData(ido interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRowOrderData", reflect.TypeOf((*MockReadnWrite)(nil).DeleteRowOrderData), ido)
}

// GetDb mocks base method.
func (m *MockReadnWrite) GetDb() *sql.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDb")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// GetDb indicates an expected call of GetDb.
func (mr *MockReadnWriteMockRecorder) GetDb() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDb", reflect.TypeOf((*MockReadnWrite)(nil).GetDb))
}

// InsertIntoOrderData mocks base method.
func (m *MockReadnWrite) InsertIntoOrderData(d models.DataUnit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoOrderData", d)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertIntoOrderData indicates an expected call of InsertIntoOrderData.
func (mr *MockReadnWriteMockRecorder) InsertIntoOrderData(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoOrderData", reflect.TypeOf((*MockReadnWrite)(nil).InsertIntoOrderData), d)
}

// ListOrderData mocks base method.
func (m *MockReadnWrite) ListOrderData(equal uint) ([]models.DataUnit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrderData", equal)
	ret0, _ := ret[0].([]models.DataUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrderData indicates an expected call of ListOrderData.
func (mr *MockReadnWriteMockRecorder) ListOrderData(equal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrderData", reflect.TypeOf((*MockReadnWrite)(nil).ListOrderData), equal)
}

// ListPackage mocks base method.
func (m *MockReadnWrite) ListPackage() ([]models.PackageUnit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPackage")
	ret0, _ := ret[0].([]models.PackageUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPackage indicates an expected call of ListPackage.
func (mr *MockReadnWriteMockRecorder) ListPackage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackage", reflect.TypeOf((*MockReadnWrite)(nil).ListPackage))
}

// ListRefuncOrderData mocks base method.
func (m *MockReadnWrite) ListRefuncOrderData(equal time.Time) ([]models.DataUnit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRefuncOrderData", equal)
	ret0, _ := ret[0].([]models.DataUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRefuncOrderData indicates an expected call of ListRefuncOrderData.
func (mr *MockReadnWriteMockRecorder) ListRefuncOrderData(equal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRefuncOrderData", reflect.TypeOf((*MockReadnWrite)(nil).ListRefuncOrderData), equal)
}

// ListUsersOrderData mocks base method.
func (m *MockReadnWrite) ListUsersOrderData(equal uint) ([]models.DataUnit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersOrderData", equal)
	ret0, _ := ret[0].([]models.DataUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersOrderData indicates an expected call of ListUsersOrderData.
func (mr *MockReadnWriteMockRecorder) ListUsersOrderData(equal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersOrderData", reflect.TypeOf((*MockReadnWrite)(nil).ListUsersOrderData), equal)
}

// SetFullDatabaseReq mocks base method.
func (m *MockReadnWrite) SetFullDatabaseReq() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFullDatabaseReq")
}

// SetFullDatabaseReq indicates an expected call of SetFullDatabaseReq.
func (mr *MockReadnWriteMockRecorder) SetFullDatabaseReq() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFullDatabaseReq", reflect.TypeOf((*MockReadnWrite)(nil).SetFullDatabaseReq))
}

// UpdateOrderData mocks base method.
func (m *MockReadnWrite) UpdateOrderData(unit models.DataUnit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderData", unit)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderData indicates an expected call of UpdateOrderData.
func (mr *MockReadnWriteMockRecorder) UpdateOrderData(unit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderData", reflect.TypeOf((*MockReadnWrite)(nil).UpdateOrderData), unit)
}
